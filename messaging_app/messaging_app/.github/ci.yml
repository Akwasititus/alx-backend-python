name: Django CI with Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: 💾 Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-django coverage pytest-cov flake8 black isort

    - name: 🗄️ Wait for MySQL to be ready
      run: |
        sudo apt-get update
        sudo apt-get install -y mysql-client
        while ! mysqladmin ping -h"127.0.0.1" -P3306 -uroot -proot --silent; do
          echo "Waiting for MySQL..."
          sleep 2
        done

    - name: 🔧 Set up environment variables
      run: |
        echo "DATABASE_URL=mysql://root:root@127.0.0.1:3306/test_db" >> $GITHUB_ENV
        echo "DEBUG=False" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-ci-$GITHUB_SHA" >> $GITHUB_ENV

    - name: 🧪 Run migrations
      run: |
        python manage.py makemigrations
        python manage.py migrate

    - name: ✅ Run tests with pytest and coverage
      run: |
        python -m pytest --cov=./ --cov-report=xml --cov-report=html --cov-report=term-missing -v

    - name: 📊 Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: |
          htmlcov/
          coverage.xml
        retention-days: 30

    - name: 📈 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

  lint:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: 📦 Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort

    - name: 🔍 Run flake8 linting
      run: |
        # First run: Critical errors (will fail the build)
        echo "🚨 Checking for critical flake8 errors..."
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        
        # Second run: All other errors and warnings (configure to your preference)
        echo "📋 Running comprehensive flake8 check..."
        flake8 . --count --max-complexity=10 --max-line-length=88 --statistics --extend-ignore=E203,W503
        
    - name: 🎨 Check code formatting with black
      run: |
        echo "🎨 Checking code formatting with black..."
        black --check --diff .

    - name: 🔄 Check import sorting with isort
      run: |
        echo "🔄 Checking import sorting with isort..."
        isort --check-only --diff .

  code-quality:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage

    - name: 📊 Generate detailed coverage report
      run: |
        python -m coverage run -m pytest
        python -m coverage html
        python -m coverage json
        python -m coverage report

    - name: 📁 Upload detailed coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: detailed-coverage-report
        path: |
          htmlcov/
          coverage.json
          .coverage
        retention-days: 30

    - name: 📝 Generate coverage badge
      run: |
        # Extract coverage percentage and create a badge
        COVERAGE=$(python -m coverage report | grep TOTAL | awk '{print $4}' | sed 's/%//')
        echo "Coverage: $COVERAGE%"
        
        # Create a simple badge (you can use proper badge services later)
        if (( $(echo "$COVERAGE >= 80" | bc -l) )); then
          COLOR="green"
        elif (( $(echo "$COVERAGE >= 60" | bc -l) )); then
          COLOR="yellow"
        else
          COLOR="red"
        fi
        echo "COVERAGE_PERCENTAGE=$COVERAGE" >> $GITHUB_ENV

    - name: 📋 Display quality report
      run: |
        echo "📊 CODE QUALITY REPORT"
        echo "======================"
        echo "✅ Tests: Completed"
        echo "✅ Linting: Completed" 
        echo "📈 Coverage: ${{ env.COVERAGE_PERCENTAGE }}%"
        echo "======================"

# This ensures all jobs must pass
  quality-gate:
    runs-on: ubuntu-latest
    needs: [test, lint, code-quality]
    
    steps:
    - name: ✅ All quality checks passed
      run: |
        echo "🎉 All code quality checks passed!"
        echo "✅ Tests: PASSED"
        echo "✅ Linting: PASSED"
        echo "✅ Coverage: GENERATED"

