pipeline {
    agent any
    
    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
        DOCKER_IMAGE = "your-dockerhub-username/messaging-app"
        DOCKER_TAG = "latest"
    }
    
    stages {
        // STAGE 1: Get the code from GitHub
        stage('Checkout Code') {
            steps {
                echo 'üì• Getting code from GitHub...'
                git branch: 'main', 
                    url: 'https://github.com/Akwasititus/alx-backend-python.git'
            }
        }
        
        // STAGE 2: Install Python tools
        stage('Install Dependencies') {
            steps {
                echo 'üêç Installing Python dependencies...'
                sh 'pip install -r requirements.txt'
            }
        }
        
        // STAGE 3: Run tests
        stage('Run Tests') {
            steps {
                echo 'üß™ Running tests...'
                sh 'pytest --junitxml=test-results.xml -v'
            }
            post {
                always {
                    junit 'test-results.xml'
                }
            }
        }
        
        // NEW STAGE 4: Build Docker Image
        stage('Build Docker Image') {
            steps {
                echo 'üê≥ Building Docker image...'
                script {
                    dir('messaging_app') {
                        sh "docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} ."
                    }
                }
            }
        }
        
        // NEW STAGE 5: Push to Docker Hub
        stage('Push to Docker Hub') {
            steps {
                echo 'üì§ Pushing Docker image to Docker Hub...'
                script {
                    // Login to Docker Hub
                    sh "echo ${DOCKERHUB_CREDENTIALS_PSW} | docker login -u ${DOCKERHUB_CREDENTIALS_USR} --password-stdin"
                    
                    // Push the image
                    sh "docker push ${DOCKER_IMAGE}:${DOCKER_TAG}"
                    
                    // Logout from Docker Hub
                    sh "docker logout"
                }
            }
        }
    }
    
    post {
        always {
            echo 'üéâ Pipeline finished!'
            cleanWs()  // Clean workspace
        }
        success {
            echo '‚úÖ Pipeline completed successfully! Docker image built and pushed.'
        }
        failure {
            echo '‚ùå Pipeline failed! Check logs above.'
        }
    }
}